diff --git a/pykolab/auth/ldap/__init__.py b/pykolab/auth/ldap/__init__.py
index bc4f5fd..4b5f876 100644
--- a/pykolab/auth/ldap/__init__.py
+++ b/pykolab/auth/ldap/__init__.py
@@ -51,6 +51,8 @@ from pykolab.translate import _ as _l
 import auth_cache
 import cache
 
+from pykolab import wap_client
+
 # pylint: disable=invalid-name
 log = pykolab.getLogger('pykolab.auth')
 conf = pykolab.getConf()
@@ -98,7 +100,23 @@ class LDAP(Base):
 
             Called from pykolab.auth.Auth, the realm parameter is derived, while
             login[3] preserves the originally specified realm.
-        """
+
+            If unique_uid_across_domains is defined as true,
+            and username is not an email address,
+            and the username is unique across all domains,
+            then the domain is determined that contains this username
+            and used as the realm
+        """
+
+        if conf.get('kolab', 'unique_uid_across_domains') == "true":
+            if ((not "@" in login[0])
+                    and (login[0] != 'cyrus-admin')
+                    and (realm == conf.get('kolab', 'primary_domain'))):
+                wap_client.authenticate()
+                userdomain = wap_client.user_get_domain(login[0])
+                if userdomain != False and not userdomain['domain'] is None:
+                    realm = userdomain['domain']
+                    self.domain = userdomain['domain']
 
         try:
             log.debug(
diff --git a/pykolab/auth/ldap/__init__.py.orig b/pykolab/auth/ldap/__init__.py.orig
index 4ad86fa..bc4f5fd 100644
--- a/pykolab/auth/ldap/__init__.py.orig
+++ b/pykolab/auth/ldap/__init__.py.orig
@@ -1931,7 +1931,8 @@ class LDAP(Base):
                     self.imap.user_mailbox_create(entry_changes[result_attribute])
 
                 elif not entry_changes[result_attribute] == old_canon_attr:
-                    self.imap.user_mailbox_rename(old_canon_attr, entry_changes[result_attribute])
+                    # do not rename an existing mailbox
+                    entry_changes[result_attribute] = old_canon_attr
 
         cache.get_entry(self.domain, entry)
 
@@ -2106,10 +2107,8 @@ class LDAP(Base):
                     )
 
                 else:
-                    self.imap.user_mailbox_rename(
-                        old_canon_attr,
-                        entry_changes[result_attribute]
-                    )
+                    # do not rename an existing mailbox
+                    entry_changes[result_attribute] = old_canon_attr
 
                 entry[result_attribute] = entry_changes[result_attribute]
                 cache.get_entry(self.domain, entry)
@@ -2121,10 +2120,8 @@ class LDAP(Base):
                     )
 
                 else:
-                    self.imap.user_mailbox_rename(
-                        old_canon_attr,
-                        entry[result_attribute]
-                    )
+                    # do not rename an existing mailbox
+                    entry[result_attribute] = old_canon_attr
 
                 cache.get_entry(self.domain, entry)
             else:
@@ -2290,10 +2287,8 @@ class LDAP(Base):
 
         if result_attribute in entry_changes and old_canon_attr is not None:
             if not entry_changes[result_attribute] == old_canon_attr:
-                self.imap.user_mailbox_rename(
-                    old_canon_attr,
-                    entry_changes[result_attribute]
-                )
+                # do not rename an existing mailbox
+                entry_changes[result_attribute] = old_canon_attr
 
         for key in entry_changes.keys():
             entry[key] = entry_changes[key]
diff --git a/pykolab/auth/ldap/__init__.py.rej b/pykolab/auth/ldap/__init__.py.rej
index d3ca399..722f7f2 100644
--- a/pykolab/auth/ldap/__init__.py.rej
+++ b/pykolab/auth/ldap/__init__.py.rej
@@ -1,54 +1,35 @@
 --- pykolab/auth/ldap/__init__.py
 +++ pykolab/auth/ldap/__init__.py
-@@ -1859,10 +1859,8 @@
-                         )
- 
-                 elif not entry_changes[result_attribute] == old_canon_attr:
--                    self.imap.user_mailbox_rename(
--                            old_canon_attr,
--                            entry_changes[result_attribute]
--                        )
-+                    # do not rename an existing mailbox
-+                    entry_changes[result_attribute] = old_canon_attr
- 
-         cache.get_entry(self.domain, entry)
- 
-@@ -2011,10 +2009,8 @@
-                         )
- 
-                 else:
--                    self.imap.user_mailbox_rename(
--                            old_canon_attr,
--                            entry_changes[result_attribute]
--                        )
-+                    # do not rename an existing mailbox
-+                    entry_changes[result_attribute] = old_canon_attr
- 
-                 entry[result_attribute] = entry_changes[result_attribute]
-                 cache.get_entry(self.domain, entry)
-@@ -2026,10 +2022,8 @@
-                         )
- 
-                 else:
--                    self.imap.user_mailbox_rename(
--                            old_canon_attr,
--                            entry[result_attribute]
--                        )
-+                    # do not rename an existing mailbox
-+                    entry[result_attribute] = old_canon_attr
- 
-                 cache.get_entry(self.domain, entry)
-             else:
-@@ -2199,10 +2193,8 @@
- 
-         if entry_changes.has_key(result_attribute) and not old_canon_attr == None:
-             if not entry_changes[result_attribute] == old_canon_attr:
--                self.imap.user_mailbox_rename(
--                        old_canon_attr,
--                        entry_changes[result_attribute]
--                    )
-+                # do not rename an existing mailbox
-+                entry_changes[result_attribute] = old_canon_attr
- 
-         for key in entry_changes.keys():
-             entry[key] = entry_changes[key]
+@@ -33,6 +33,7 @@
+ from pykolab.constants import *
+ from pykolab.errors import *
+ from pykolab.translate import _
++from pykolab import wap_client
+ 
+ log = pykolab.getLogger('pykolab.auth')
+ conf = pykolab.getConf()
+@@ -138,8 +139,23 @@
+ 
+             Called from pykolab.auth.Auth, the realm parameter is derived, while
+             login[3] preserves the originally specified realm.
+-        """
+ 
++            If unique_uid_across_domains is defined as true,
++            and username is not an email address,
++            and the username is unique across all domains,
++            then the domain is determined that contains this username
++            and used as the realm
++        """
++
++        if conf.get('kolab', 'unique_uid_across_domains') == "true":
++            if ((not "@" in login[0])
++                    and (login[0] != 'cyrus-admin')
++                    and (realm == conf.get('kolab', 'primary_domain'))):
++                wap_client.authenticate()
++                userdomain = wap_client.user_get_domain(login[0])
++                if userdomain != False and not userdomain['domain'] is None:
++                    realm = userdomain['domain']
++                    self.domain = userdomain['domain']
+         try:
+             log.debug(
+                     _("Attempting to authenticate user %s in realm %s") % (
diff --git a/pykolab/wap_client/__init__.py b/pykolab/wap_client/__init__.py
index 900e280..0b1e002 100644
--- a/pykolab/wap_client/__init__.py
+++ b/pykolab/wap_client/__init__.py
@@ -624,6 +624,16 @@ def user_find(attribs=None):
 
     return user
 
+
+def user_get_domain(user=None):
+    if user is None:
+        user = utils.ask_question("User unique id")
+
+    _params = {'id': user}
+
+    return request('GET', 'user.get_domain', get=_params)
+
+
 def user_form_value_generate(params=None):
     if params == None:
         params = get_user_input()
